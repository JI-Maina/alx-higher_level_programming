tests for 7-base_geometry.py
-------------------------------------

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

case 1: Passing an integer

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name", 5)

-------------------------------------------

case 2: Passing a string

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name", "John")
    Traceback (most recent call last):
        ...
    TypeError: name must be an integer

---------------------------------------------

case 3: Passing a negative integer

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", -12)
    Traceback (most recent call last):
        ...
    ValueError: my_int must be greater than 0

---------------------------------------------

case 4: Passing a float

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name", "12.3")
    Traceback (most recent call last):
        ...
    TypeError: name must be an integer


    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name", "12.0")
    Traceback (most recent call last):
        ...
    TypeError: name must be an integer

---------------------------------------------

case 5: Passing no arguement

    >>> bg = BaseGeometry()
    >>> bg.integer_validator()
    Traceback (most recent call last):
        ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

----------------------------------------------

case 6: Passing one arguement

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name")
    Traceback (most recent call last):
        ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'


    >>> bg = BaseGeometry()
    >>> bg.integer_validator(5)
    Traceback (most recent call last):
        ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

----------------------------------------------

case 7: Passing zero

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name", 0)
    Traceback (most recent call last):
        ...
    ValueError: name must be greater than 0

Trying to print the area

    >>> bg = BaseGeometry()
    >>> bg.area()
    Traceback (most recent call last):
    	      ...
    Exception: area() is not implemented

---------------------------------------------------

Passing three arguments to integer_validator

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name", 1, 2)
    Traceback (most recent call last):
    	      ...
    TypeError: integer_validator() takes 3 positional arguments but 4 were given

-----------------------------------------------------

Passing one argument to area method

    >>> bg = BaseGeometry()
    >>> bg.area(5)
    Traceback (most recent call last):
    	      ...
    TypeError: area() takes 1 positional argument but 2 were given

-------------------------------------------------------

case 10:Passing a tuple

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("tuple", (1,))
    Traceback (most recent call last):
        ...
    TypeError: tuple must be an integer

---------------------------------------------------------

case 10:Passing a list

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("list", [4])
    Traceback (most recent call last):
        ...
    TypeError: list must be an integer

---------------------------------------------------------

case 12:Passing a Bool

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("bool", True)
    Traceback (most recent call last):
        ...
    TypeError: bool must be an integer

--------------------------------------------------------

case 13:Passing a dictionary

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("dict", {1,2})
    Traceback (most recent call last):
        ...
    TypeError: dict must be an integer

--------------------------------------------------------

case 14:Passing None

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name", None)
    Traceback (most recent call last):
        ...
    TypeError: name must be an integer

---------------------------------------------------------
